#!/bin/bash
#===============================================================================
#          FILE: gitploy
#
#   DESCRIPTION: Repo integration and deployment
#
#          BUGS: https://github.com/jeremyBass/gitploy/issues
#
#     COPYRIGHT: (c) 2014 by the Pleasures, see AUTHORS.rst for more
#                details.
#
#       LICENSE: Apache 2.0
#  ORGANIZATION: pleasures llc
#       CREATED: 1/1/2014
#===============================================================================
set -o nounset                              # Treat unset variables as an error
__ScriptVersion="0.1.0"
__ScriptName="gitploy"

#===  FUNCTION  ================================================================
#         NAME:  usage
#  DESCRIPTION:  Display usage information.
#===============================================================================
SCRIPT=${0##*/}
IFS=$''
usage() {
    cat << END
    
  Usage :  ${__ScriptName} [<command>] [options]

  Command Examples:
    $ ${__ScriptName} $(tput bold)$(tput sgr0)<module> <repository>
                => Install a module by cloning specified git repository
    $ ${__ScriptName} $(tput bold)init$(tput sgr0)
                => Initialize .modgit/ folder
    $ ${__ScriptName} $(tput bold)ls$(tput sgr0)
                => List installed modules
    $ ${__ScriptName} $(tput bold)rm$(tput sgr0) <module>
                => Remove specified module
    $ ${__ScriptName} $(tput bold)up$(tput sgr0) <module>
                => Update specified module
    $ ${__ScriptName} $(tput bold)info$(tput sgr0) <module>
                => Show information about a specific module
    $ ${__ScriptName} $(tput bold)files$(tput sgr0) <module>
                => List deployed files of specified module
    $ ${__ScriptName} $(tput bold)proxy$(tput sgr0) <module> <git_args>
                => Run git command into specified module

  Options:
  -v   Show gitploy version
  
  -h   Show this help
  
  -d   (Dry run) Dry run mode (show what would be done)
  
  -i   (Include) Only deploys items that match the filters
       EX:
       $SCRIPT $(tput bold)-i lib/ -i foo/:bar/$(tput sgr0) my_module https://github.com/account/repository.git
                => will deploy only lib/ (to lib/) and foo/ (to bar/)
                
  -e   (Exclude) Filters out listed items.  May use regex syntax
       EX:
       $SCRIPT $(tput bold)-e lib/tests/ -e *.txt$(tput sgr0) my_module https://github.com/account/repository.git
                => will exclude both directory lib/tests/ and file lib/README.txt
                
  -b   (Branch) Specify a repository branch (only for add command)
       EX:
       $SCRIPT $(tput bold)-b 1.0-stable$(tput sgr0) my_module https://github.com/account/repository.git
                => will checkout 1.0-stable branch of 
                    specified repository
                
  -t   (Tag) Specify a repository tag (only for add and update command)
       EX:
       $SCRIPT $(tput bold)-t 1.2.0$(tput sgr0) my_module https://github.com/account/repository.git
                => will checkout 1.2.0 tag of specified repository
                
  -r   (Reqursive) Move through the modules tracked reqursively
       EX:
       $ ${__ScriptName} rm $(tput bold)-r$(tput sgr0)
                => will remove all repositories logged
                   $(tput bold)NOTE::$(tput sgr0) all repo removals will be meet with a prompt
       
  -u   (Unattended) This flag will accept all promots.  Use wisely as 
                    unattended in this form, `$ rm -r -u`, would be wiping
                    all logged repos
       EX:
       $ ${__ScriptName} $(tput bold)-u$(tput sgr0) rm <module>
                => will remove named repository $(tput bold) 
                   WITHOUT a prompt$(tput sgr0)
       
  -q   (Quite) If you must hide the verbose output,
                this flag will block all stdout
       EX:
       $ ${__ScriptName} $(tput bold)-q$(tput sgr0) <module> <repository>
                => will add a new repository with out any stdout messaging
                
  -w   (Wall Broadcasting) Some times it's important that you
                            don't have others doing anything 
                            while you upgrade which wall will let
                            them know you doing something
       EX:
       $ ${__ScriptName} $(tput bold)-w$(tput sgr0) <module> <repository>
                => will add a new repository and let 
                    everyone that is logged in know about it               
                
END
}
# ----------  end of usage  ----------

#-----------------------------------------------------------------------
#  Defaults
#-----------------------------------------------------------------------
#fill out
# Case-insensitive for regex matching
shopt -s nocasematch

# Some truth values
GD_TRUE=1
GD_FALSE=0

DRY_RUN=GD_FALSE
ACTION=""
INCLUDES=""
EXCLUDES=""
GITEXCLUDES="\
readme.*
about.*
license.*
copyright.*
changelog.*
credit.*
faq.*
\.travis.*
\.git.*
modman
composer\.json"
BRANCH="master"
TAG=""

#===  FUNCTION  ================================================================
#          NAME:  echoerr
#   DESCRIPTION:  Echo errors to stderr.
#===============================================================================
echoerror() {
    printf "${RC} * ERROR${EC}: $@\n" 1>&2;
}





#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------
#fill out



# Handle options
while getopts "h" opt; do
  case $opt in
    h )  usage; exit 0                                  ;;


    \?)  echo
         echoerror "Option does not exist : $OPTARG"
         usage
         exit 1
         ;;
  esac
done





